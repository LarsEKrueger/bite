@startuml

title Class Diagram

class Bite
class View
class Session
class Presenter {
  - currentInteraction
}
class Interpreter

Bite *--> View
Bite *-- Interpreter
Bite *-- "1" Session

View *--> Presenter
Presenter --> Session
Presenter --> Interpreter

Interpreter --> Job

Session *-- Job

@enduml

=====================

@startuml
title Thread Allocation

component Session

node "Main Thread" as Main_Thread {
  [Bite]
  [View]
  [Presenter]
  interface "Session\n::display_line()" as Session_view
  interface "Interpreter\n::run_command()" as Interpreter_execute
}

node "Interpreter Thread" as Interpreter_Thread {
  [Interpreter]
}

node "Job Thread" as Job_Thread {
  interface "Session\n::add_bytes()" as Session_add
  [Job]
  interface "Session\n::set_exit_code()" as Session_set_exit_code
}

Session *-- Job

Main_Thread *-- Interpreter_Thread : spawn
Interpreter_Thread *-- Job_Thread : spawn
[Bite] --> [View]
[View] --> [Presenter]

Presenter -left-( Session_view
Presenter - Interpreter_execute

Session -up- Session_view
Session --( Session_add

Session --( Session_set_exit_code
Job -left- Session_set_exit_code

Job -right- Session_add

Interpreter_execute )-down- Interpreter 

@enduml

=====================

@startuml
title Drawing

View -> Presenter : display_lines()
Presenter -> SharedSession : lock()
SharedSession -> Session
activate Session

Presenter ->  View : draw_line()
View -> Presenter

Session -> SharedSession
deactivate Session
SharedSession -> Presenter : unlock()
@enduml

=====================

@startuml
title Run Foreground Command

View -> Presenter : event_XXX()
Presenter -> Interpreter : is_running()
Interpreter -> Presenter : false

Presenter -> Interpreter : run()
Interpreter -> Session : create_interaction()
Session -> Interpreter : id
Interpreter -> Job : new(id)

Interpreter -> Runner : run()
activate Runner

Runner -> Child : spawn()
activate Child

Interpreter -> Presenter : id

Presenter -> Presenter : Switch to\nExecuteCommandPresenter\nwith id
Presenter -> View

group Command runs
  ... Command produces no output ...
  group Next redraw
    Presenter -> Session : is_running(id)
    Session -> Presenter : true
  end
  ... Command produces no output, then it does ...
  Child --> Session : add_bytes(id, text)
  Session -> Child
  ... Presenter is sending input to child ...
  Presenter -> Session : write_stdin_foreground(id)
  Session -> Job
  Job --> Child : write()
  Child -> Job
  Job -> Session
  Session -> Presenter
end

deactivate Child
Child --> Session : set_running_status(id)

deactivate Runner

group Next redraw
  Presenter -> Session : is_running(id)
  Session -> Presenter : false
  Presenter -> Presenter : Switch to\nComposeCommandPresenter
end

@enduml

=====================

@startuml
title Run Background Command

View -> Presenter : event_XXX()
Presenter -> Interpreter : is_running()
Interpreter -> Presenter : false
Presenter -> Interpreter : run()

Interpreter -> Session : create_interaction()
Session -> Interpreter : id
Interpreter -> Job : new(id)

Interpreter -> Runner : run()
activate Runner

Runner -> Runner2 : spawn()
activate Runner2
Runner2 -> Child : spawn()
activate Child

deactivate Runner
Runner -> Interpreter
Interpreter -> Presenter : id

Presenter -> Presenter : Switch to\nExecuteCommandPresenter\nwith id
Presenter -> View

group Command runs
  ... Command produces no output, then it does ...
  Child --> Session : add_bytes(id, text)
  Session -> Child
  ... Presenter is sending input to child ...
  Presenter -> Session : write_stdin_foreground(id)
  Session -> Job
  Job -> Child : write()
  Child -> Job
  Job -> Session
  Session -> Presenter
end

deactivate Child
Child --> Session : set_running_status(id)

deactivate Runner2

@enduml

=====================

@startuml
title ComposeCommand Presenter States and Keys
hide empty description

note as N1
[1] : At last history entry
endnote

[*] -> Compose

state "." as ComposeLetter
Compose -right-> ComposeLetter: Letter \n Update History
ComposeLetter -> Compose
Compose -up-> History : Up \n Save Input
Compose -down-> Complete : Tab

History -> Compose : Enter \n Run
History -> Compose : Esc \n Restore Input
History -> Compose : Down [1] \n Restore Input
History -> Compose : Left, Right, Home, End \n Overwrite Input

state "." as HistUpDown
History -left-> HistUpDown : Up, Down \n Overwrite Input
HistUpDown -> History

state "." as HistLetter
History -right-> HistLetter : Letter \n Update Results
HistLetter -> History

Complete -> Compose : Esc

state "." as CompleteLetter
Complete -right-> CompleteLetter : Letter, Backspace \n Update Search
CompleteLetter -> Complete

@enduml
