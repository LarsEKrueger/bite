@startuml

title Class Diagram

class Bite
class View
class Session
class Jobs
class Presenter {
  - foregroundJob
  - currentInteraction
}
class Interpreter

Bite *--> "n" View
Bite *-- Interpreter
Bite *-- Jobs
Bite *-- "1" Session
Bite *-- "n" Presenter

View --> "1" Presenter
Presenter --> Session
Presenter --> Interpreter

Presenter ---> Jobs

Interpreter --> Jobs

Jobs *--> Job
Job --> Session

@enduml

=====================

@startuml
title Thread Allocation

component Session

node "Main Thread" as Main_Thread {
  [Bite]
  [View]
  [Presenter]
  [Interpreter]
  [Jobs]
  [Job]
  interface "Session\n::view()" as Session_view
  interface "Interpreter\n::execute()" as Interpreter_execute
}

[Presenter] --> [Session]
[Jobs] *---> [Job]
[Job] *--- Job_Thread
[Bite] *-- [Interpreter]
[Bite] *-- [Jobs]
[Bite] *-- Session
[Bite] *--> "n" [View]
Bite *-- "n" Presenter
[View] --> "1" [Presenter]

Job --> Session
Interpreter --> Jobs


Presenter - Session_view

Presenter - Interpreter_execute
Presenter --> Interpreter

Presenter --> Jobs

node "Job Thread" as Job_Thread {
  interface "Session\n::add_bytes()" as Session_add

  interface "Session\n::set_exit_code()" as Session_set_exit_code
}

Session_view )-- Session
Session --( Session_add

Session --( Session_set_exit_code
Session_set_exit_code -- Job

[Job] -- Session_add

Interpreter_execute )-- Interpreter

@enduml

=====================

@startuml
title Drawing

View -> Presenter : display_lines()
Presenter -> Session : line_iter()
Session -> Presenter
hnote over Presenter : convert\nlines
Presenter -> View
hnote over View : draw\nlines
@enduml

=====================

@startuml
title Run Foreground Command

View -> Presenter : event_XXX()
Presenter -> Session : create_interaction()
Session -> Presenter : id

Presenter -> Interpreter : run_command()
Interpreter -> Jobs : create_job()
Jobs -> Job : new(id)
Job -> Child : spawn()
activate Child
Job -> Jobs
Jobs -> Interpreter
Interpreter -> Presenter
Presenter -> Presenter : Switch to\nExecuteCommandPresenter\nwith id
Presenter -> View

group Command runs
  ... Command produces no output ...
  group Next redraw
    Presenter -> Session : get_exit_code(id)
    Session -> Presenter : None
  end
  ... Command produces no output, then it does ...
  Job --> Session : add_bytes(id, text)
  ... Presenter is sending input to child ...
  Presenter -> Job : add_bytes()
  Job -> Child : write()
  Child -> Job
  Job -> Presenter
end

deactivate Child
Child --> Session : set_exit_code(id)

group Next redraw
  Presenter -> Session : get_exit_code(id)
  Session -> Presenter : Some(code)
  Presenter -> Presenter : Switch to\nComposeCommandPresenter
end

@enduml

=====================

@startuml
title Run Background Command

View -> Presenter : event_XXX()
Presenter -> Session : create_interaction()
Session -> Presenter : id

Presenter -> Interpreter : run_command()
Interpreter -> Jobs : create_job()
Jobs -> Job : new(id)
Job -> Child : spawn()
activate Child
Job -> Jobs
Jobs -> Interpreter
Interpreter -> Presenter
Presenter -> View

group Command runs
  ... Command produces no output ...
  group Next redraw
    Presenter -> Session : get_exit_code(id)
    Session -> Presenter : None
  end
  ... Command produces no output, then it does ...
  Job --> Session : add_line(id, text)
end

deactivate Child
Child --> Session : set_exit_code(id)

group Next redraw
  Presenter -> Session : get_exit_code(id)
  Session -> Presenter : Some(code)
end

@enduml

=====================

@startuml
title Run Foreground TUI

View -> Presenter : event_XXX()
participant Session
Presenter -> Interpreter : run_command()
Interpreter -> Jobs : create_job()
Jobs -> Job : new(id)
Job -> Child : spawn()
activate Child
Job -> Jobs
Jobs -> Interpreter
Interpreter -> Presenter
Presenter -> Presenter : Switch to\nExecuteCommandPresenter\nwith id
Presenter -> View

group Command runs
  ... Command switches to TUI  ...
  Job --> Session : add_bytes(id, text)

  group Next redraw
    View -> Presenter
    Presenter -> Session : is_tui_mode()
    Session -> Presenter : True
    Presenter -> Presenter : Switch to\nTuiPresenter
    Presenter -> View
  end
end

deactivate Child
Child --> Session : set_exit_code(id)

group Next redraw
  View -> Presenter
  Presenter -> Session : get_exit_code(id)
  Session -> Presenter : Some(code)
  Presenter -> Presenter : Switch to\nComposeCommandPresenter
  Presenter -> View
end

@enduml

=====================

@startuml
title Run Background TUI

participant Bite

View -> Presenter : event_XXX()
Presenter -> Session : create_interaction()
Session -> Presenter : id

Presenter -> Interpreter : run_command()
Interpreter -> Jobs : create_job()
Jobs -> Job : new(id)
Job -> Child : spawn()
activate Child
Job -> Jobs
Jobs -> Interpreter
Interpreter -> Presenter
Presenter -> View

group Command runs
  ... Command switches to TUI  ...
  Job --> Session : add_bytes(id, text)
  ... Some time passes ...
  group Next redraw
    View -> Presenter
    Presenter -> Session : is_tui_mode()
    Session -> Presenter : True
    Presenter -> View : Create new view
    View -> Bite : Create new view
  end
end

deactivate Child
Child --> Session : set_exit_code(id)

group Next redraw
  View -> Presenter
  Presenter -> Session : get_exit_code(id)
  Session -> Presenter : Some(code)
  Presenter -> View : Close view
  View -> Bite : Close view
end

@enduml
